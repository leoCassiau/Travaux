THEORY ProofList IS
  _f(1) & _f(24) & _f(98) & supprimerProfilAutorise.3,(_f(102) & _f(49) => _f(103));
  _f(1) & _f(24) & _f(98) & supprimerProfilAutorise.2,(_f(100) & _f(46) => _f(101));
  _f(1) & _f(24) & _f(98) & supprimerProfilAutorise.1,(_f(56) & _f(38) => _f(99));
  _f(1) & _f(24) & _f(90) & mettreNonContraint.5,(_f(96) & _f(49) => _f(97));
  _f(1) & _f(24) & _f(90) & mettreNonContraint.4,(_f(94) & _f(46) => _f(95));
  _f(1) & _f(24) & _f(90) & mettreNonContraint.3,(_f(56) & _f(38) => _f(93));
  _f(1) & _f(24) & _f(90) & mettreNonContraint.2,(_f(56) & _f(27) => _f(92));
  _f(1) & _f(24) & _f(90) & mettreNonContraint.1,(_f(56) & _f(27) => _f(91));
  _f(1) & _f(24) & _f(83) & mettreContraint.4,(_f(88) & _f(49) => _f(89));
  _f(1) & _f(24) & _f(83) & mettreContraint.3,(_f(86) & _f(46) => _f(87));
  _f(1) & _f(24) & _f(83) & mettreContraint.2,(_f(56) & _f(27) => _f(85));
  _f(1) & _f(24) & _f(83) & mettreContraint.1,(_f(56) & _f(27) => _f(84));
  _f(1) & _f(24) & _f(80) & mettreNonExclusifService.2,(_f(30) => _f(82));
  _f(1) & _f(24) & _f(80) & mettreNonExclusifService.1,(_f(30) => _f(81));
  _f(1) & _f(24) & _f(77) & mettreExclusifService.2,(_f(30) => _f(79));
  _f(1) & _f(24) & _f(77) & mettreExclusifService.1,(_f(30) => _f(78));
  _f(1) & _f(24) & _f(74) & modifierProfil.2,(_f(65) => _f(76));
  _f(1) & _f(24) & _f(74) & modifierProfil.1,(_f(65) => _f(75));
  _f(1) & _f(24) & _f(68) & supprimerProcessus.4,(_f(65) => _f(73));
  _f(1) & _f(24) & _f(68) & supprimerProcessus.3,(_f(65) => _f(72));
  _f(1) & _f(24) & _f(68) & supprimerProcessus.2,(_f(36) => _f(71));
  _f(1) & _f(24) & _f(68) & supprimerProcessus.1,(_f(69) => _f(70));
  _f(1) & _f(24) & _f(62) & ajouterProcessus.3,(_f(63) & _f(65) => _f(67));
  _f(1) & _f(24) & _f(62) & ajouterProcessus.2,(_f(63) & _f(65) => _f(66));
  _f(1) & _f(24) & _f(62) & ajouterProcessus.1,(_f(63) & _f(36) => _f(64));
  _f(1) & _f(24) & _f(59) & interrompreService.2,(_f(56) & _f(33) => _f(61));
  _f(1) & _f(24) & _f(59) & interrompreService.1,(_f(56) & _f(33) => _f(60));
  _f(1) & _f(24) & _f(55) & activerService.2,(_f(56) & _f(33) => _f(58));
  _f(1) & _f(24) & _f(55) & activerService.1,(_f(56) & _f(33) => _f(57));
  _f(1) & _f(24) & _f(53) & suspendre.1,(_f(36) => _f(54));
  _f(1) & _f(24) & _f(51) & souscrire.1,(_f(36) => _f(52));
  _f(1) & _f(24) & _f(25) & ajouterService.14,(_f(48) & _f(49) => _f(50));
  _f(1) & _f(24) & _f(25) & ajouterService.13,(_f(45) & _f(46) => _f(47));
  _f(1) & _f(24) & _f(25) & ajouterService.12,(_f(26) & _f(40) => _f(44));
  _f(1) & _f(24) & _f(25) & ajouterService.11,(_f(26) & _f(40) => _f(43));
  _f(1) & _f(24) & _f(25) & ajouterService.10,(_f(26) & _f(40) => _f(42));
  _f(1) & _f(24) & _f(25) & ajouterService.9,(_f(26) & _f(40) => _f(41));
  _f(1) & _f(24) & _f(25) & ajouterService.8,(_f(26) & _f(38) => _f(39));
  _f(1) & _f(24) & _f(25) & ajouterService.7,(_f(26) & _f(36) => _f(37));
  _f(1) & _f(24) & _f(25) & ajouterService.6,(_f(26) & _f(33) => _f(35));
  _f(1) & _f(24) & _f(25) & ajouterService.5,(_f(26) & _f(33) => _f(34));
  _f(1) & _f(24) & _f(25) & ajouterService.4,(_f(26) & _f(30) => _f(32));
  _f(1) & _f(24) & _f(25) & ajouterService.3,(_f(26) & _f(30) => _f(31));
  _f(1) & _f(24) & _f(25) & ajouterService.2,(_f(26) & _f(27) => _f(29));
  _f(1) & _f(24) & _f(25) & ajouterService.1,(_f(26) & _f(27) => _f(28));
  _f(1) & Initialisation.12,(_f(21) & _f(22) => _f(23));
  _f(1) & Initialisation.11,(_f(17) => _f(20));
  _f(1) & Initialisation.10,(_f(17) => _f(19));
  _f(1) & Initialisation.9,(_f(17) => _f(18));
  _f(1) & Initialisation.8,(_f(15) => _f(16));
  _f(1) & Initialisation.7,(_f(13) => _f(14));
  _f(1) & Initialisation.6,(_f(11) => _f(12));
  _f(1) & Initialisation.5,(_f(8) => _f(10));
  _f(1) & Initialisation.4,(_f(8) => _f(9));
  _f(1) & Initialisation.3,(_f(6) => _f(7));
  _f(1) & Initialisation.2,(_f(4) => _f(5));
  _f(1) & Initialisation.1,(_f(2) => _f(3))
END
&
THEORY Formulas IS
  ("`Component properties'" & PROFILS: FIN(INTEGER) & not(PROFILS = {}) & SERVICES: FIN(INTEGER) & not(SERVICES = {}) & PROCESSUS: FIN(INTEGER) & not(PROCESSUS = {}) & NOMS: FIN(INTEGER) & not(NOMS = {}));
  "`Check that the invariant (services <: SERVICES) is established by the initialisation - ref 3.3'";
  ({}: POW(SERVICES));
  "`Check that the invariant (processus <: PROCESSUS) is established by the initialisation - ref 3.3'";
  ({}: POW(PROCESSUS));
  "`Check that the invariant (noms <: NOMS) is established by the initialisation - ref 3.3'";
  ({}: POW(NOMS));
  "`Check that the invariant (contraint: services --> BOOL) is established by the initialisation - ref 3.3'";
  ({}: {} +-> BOOL);
  (dom({}) = {});
  "`Check that the invariant (souscrit: processus <-> services) is established by the initialisation - ref 3.3'";
  ({}: {} <-> {});
  "`Check that the invariant (profilDe: processus --> PROFILS) is established by the initialisation - ref 3.3'";
  ({}: {} +-> PROFILS);
  "`Check that the invariant (profilsAutorises: services <-> PROFILS) is established by the initialisation - ref 3.3'";
  ({}: {} <-> PROFILS);
  "`Check that the invariant (nomDe: services >->> noms) is established by the initialisation - ref 3.3'";
  ({}: {} +-> {});
  ({}~: {} +-> {});
  (ran({}) = {});
  ("`Local hypotheses'" & 1<=card({}));
  "`Check that the invariant (card(profilsAutorises)>=1 => card(profilsAutorises[contraint~[{TRUE}]])>=1) is established by the initialisation - ref 3.3'";
  (1<=card({}[{}~[{TRUE}]]));
  ("`Component invariant'" & services: POW(SERVICES) & processus: POW(PROCESSUS) & noms: POW(NOMS) & contraint: services +-> BOOL & dom(contraint) = services & exclusif: services +-> BOOL & dom(exclusif) = services & actif: services +-> BOOL & dom(actif) = services & souscrit: processus <-> services & profilDe: processus +-> PROFILS & dom(profilDe) = processus & profilsAutorises: services <-> PROFILS & nomDe: services +-> noms & nomDe~: noms +-> services & dom(nomDe) = services & ran(nomDe) = noms & (not(profilsAutorises = {}) & not(contraint~[{FALSE}] = {}) => profilsAutorises[contraint~[{FALSE}]]: POW(PROFILS)) & (1<=card(profilsAutorises) => 1<=card(profilsAutorises[contraint~[{TRUE}]])));
  ("`ajouterService preconditions in this component'" & nom: NOMS & not(nom: ran(nomDe)) & cc: BOOL & ee: BOOL);
  ("`Local hypotheses'" & ss: SERVICES & not(ss: services) & not(ss: dom(profilsAutorises)) & not(ss: ran(souscrit)) & not(ss: dom(nomDe)) & not(ss: dom(contraint)) & not(ss: dom(exclusif)) & not(ss: dom(actif)));
  "`Check that the invariant (contraint: services --> BOOL) is preserved by the operation - ref 3.4'";
  (contraint<+{ss|->cc}: services\/{ss} +-> BOOL);
  (dom(contraint<+{ss|->cc}) = services\/{ss});
  "`Check that the invariant (exclusif: services --> BOOL) is preserved by the operation - ref 3.4'";
  (exclusif<+{ss|->ee}: services\/{ss} +-> BOOL);
  (dom(exclusif<+{ss|->ee}) = services\/{ss});
  "`Check that the invariant (actif: services --> BOOL) is preserved by the operation - ref 3.4'";
  (actif<+{ss|->FALSE}: services\/{ss} +-> BOOL);
  (dom(actif<+{ss|->FALSE}) = services\/{ss});
  "`Check that the invariant (souscrit: processus <-> services) is preserved by the operation - ref 3.4'";
  (souscrit: processus <-> services\/{ss});
  "`Check that the invariant (profilsAutorises: services <-> PROFILS) is preserved by the operation - ref 3.4'";
  (profilsAutorises\/{ss}*PROFILS: services\/{ss} <-> PROFILS);
  "`Check that the invariant (nomDe: services >->> noms) is preserved by the operation - ref 3.4'";
  (nomDe<+{ss|->nom}: services\/{ss} +-> noms\/{nom});
  ((nomDe<+{ss|->nom})~: noms\/{nom} +-> services\/{ss});
  (dom(nomDe<+{ss|->nom}) = services\/{ss});
  (ran(nomDe<+{ss|->nom}) = noms\/{nom});
  ("`Local hypotheses'" & ss: SERVICES & not(ss: services) & not(ss: dom(profilsAutorises)) & not(ss: ran(souscrit)) & not(ss: dom(nomDe)) & not(ss: dom(contraint)) & not(ss: dom(exclusif)) & not(ss: dom(actif)) & not(profilsAutorises = {} & {ss}*PROFILS = {}) & not((contraint<+{ss|->cc})~[{FALSE}] = {}));
  "`Check that the invariant (profilsAutorises/={} & contraint~[{FALSE}]/={} => profilsAutorises[contraint~[{FALSE}]] <: PROFILS) is preserved by the operation - ref 3.4'";
  ((profilsAutorises\/{ss}*PROFILS)[(contraint<+{ss|->cc})~[{FALSE}]]: POW(PROFILS));
  ("`Local hypotheses'" & ss: SERVICES & not(ss: services) & not(ss: dom(profilsAutorises)) & not(ss: ran(souscrit)) & not(ss: dom(nomDe)) & not(ss: dom(contraint)) & not(ss: dom(exclusif)) & not(ss: dom(actif)) & 1<=card(profilsAutorises\/{ss}*PROFILS));
  "`Check that the invariant (card(profilsAutorises)>=1 => card(profilsAutorises[contraint~[{TRUE}]])>=1) is preserved by the operation - ref 3.4'";
  (1<=card((profilsAutorises\/{ss}*PROFILS)[(contraint<+{ss|->cc})~[{TRUE}]]));
  ("`souscrire preconditions in this component'" & pp: processus & ss: services & not(pp|->ss: souscrit) & actif[{ss}] = {TRUE});
  (souscrit\/{pp|->ss}: processus <-> services);
  ("`suspendre preconditions in this component'" & pp: processus & ss: services & pp|->ss: souscrit);
  (souscrit-{pp|->ss}: processus <-> services);
  ("`activerService preconditions in this component'" & ns: noms & ns: ran(nomDe) & actif[nomDe~[{ns}]] = {FALSE});
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns));
  (actif<+{ss|->TRUE}: services +-> BOOL);
  (dom(actif<+{ss|->TRUE}) = services);
  ("`interrompreService preconditions in this component'" & ns: noms & ns: ran(nomDe) & actif[nomDe~[{ns}]] = {TRUE});
  (actif<+{ss|->FALSE}: services +-> BOOL);
  (dom(actif<+{ss|->FALSE}) = services);
  ("`ajouterProcessus preconditions in this component'" & profil: PROFILS);
  ("`Local hypotheses'" & pp: PROCESSUS & not(pp: processus));
  (souscrit: processus\/{pp} <-> services);
  "`Check that the invariant (profilDe: processus --> PROFILS) is preserved by the operation - ref 3.4'";
  (profilDe<+{pp|->profil}: processus\/{pp} +-> PROFILS);
  (dom(profilDe<+{pp|->profil}) = processus\/{pp});
  ("`supprimerProcessus preconditions in this component'" & pp: processus & pp: dom(profilDe) & pp: dom(souscrit));
  "`Check that the invariant (processus <: PROCESSUS) is preserved by the operation - ref 3.4'";
  (processus-{pp}: POW(PROCESSUS));
  ({pp}<<|souscrit: processus-{pp} <-> services);
  ({pp}<<|profilDe: processus-{pp} +-> PROFILS);
  (dom({pp}<<|profilDe) = processus-{pp});
  ("`modifierProfil preconditions in this component'" & pp: processus & np: PROFILS);
  (profilDe<+{pp|->np}: processus +-> PROFILS);
  (dom(profilDe<+{pp|->np}) = processus);
  ("`mettreExclusifService preconditions in this component'" & ns: noms & ns: ran(nomDe));
  (exclusif<+{nomDe~(ns)|->TRUE}: services +-> BOOL);
  (dom(exclusif<+{nomDe~(ns)|->TRUE}) = services);
  ("`mettreNonExclusifService preconditions in this component'" & ns: noms & ns: ran(nomDe));
  (exclusif<+{nomDe~(ns)|->FALSE}: services +-> BOOL);
  (dom(exclusif<+{nomDe~(ns)|->FALSE}) = services);
  ("`mettreContraint preconditions in this component'" & ns: noms & ns: ran(nomDe));
  (contraint<+{ss|->TRUE}: services +-> BOOL);
  (dom(contraint<+{ss|->TRUE}) = services);
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns) & not(profilsAutorises = {}) & not((contraint<+{ss|->TRUE})~[{FALSE}] = {}));
  (profilsAutorises[(contraint<+{ss|->TRUE})~[{FALSE}]]: POW(PROFILS));
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns) & 1<=card(profilsAutorises));
  (1<=card(profilsAutorises[(contraint<+{ss|->TRUE})~[{TRUE}]]));
  ("`mettreNonContraint preconditions in this component'" & ns: noms & ns: ran(nomDe));
  (contraint<+{ss|->FALSE}: services +-> BOOL);
  (dom(contraint<+{ss|->FALSE}) = services);
  (profilsAutorises\/{ss}*PROFILS: services <-> PROFILS);
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns) & not(profilsAutorises = {} & {ss}*PROFILS = {}) & not((contraint<+{ss|->FALSE})~[{FALSE}] = {}));
  ((profilsAutorises\/{ss}*PROFILS)[(contraint<+{ss|->FALSE})~[{FALSE}]]: POW(PROFILS));
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns) & 1<=card(profilsAutorises\/{ss}*PROFILS));
  (1<=card((profilsAutorises\/{ss}*PROFILS)[(contraint<+{ss|->FALSE})~[{TRUE}]]));
  ("`supprimerProfilAutorise preconditions in this component'" & ns: noms & ns: ran(nomDe) & contraint(nomDe~(ns)) = TRUE & ps: PROFILS & ps: profilsAutorises[{nomDe~(ns)}] & 2<=card(profilsAutorises[{nomDe~(ns)}]));
  (profilsAutorises-{ss|->ps}: services <-> PROFILS);
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns) & not(profilsAutorises = {}) & not(profilsAutorises = {ss|->ps}) & not(contraint~[{FALSE}] = {}));
  ((profilsAutorises-{ss|->ps})[contraint~[{FALSE}]]: POW(PROFILS));
  ("`Local hypotheses'" & ss: services & ss = nomDe~(ns) & 1<=card(profilsAutorises-{ss|->ps}));
  (1<=card((profilsAutorises-{ss|->ps})[contraint~[{TRUE}]]))
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion("V4.0-55020")(CLT == "V4.0-53996")(genOPO == KO, genDivergencePO == KO, project_type == VALIDATION_TYPE, local_op == OK)
END
